#!/bin/sh
#
# Translation Script
# to be run as a pipe on the output of the preprocessing script
#
# usually called by sgmltrans
#
# The following environment variables should contain information from
# sgmltrans:
#   Variable        Value
#     VVERBOSE		"yes" or "no" - very verbose (default "no")
#     VERBOSE		"yes" or "no" - "no" means very quiet (default "yes")
#     STYLE			An additional translation style mapping file
#     MAP			The translation mapping file.
#     FORMAT		The target format for translation.
#     FILE			The base filename of the sgml file to be translated.
#     SGMLFILE		The whole filename of the sgml file to be translated.
#     SCRIPTDIR		The directory containing the translation scripts.
#     DOCTYPE		The SGML type of the current document.
#     SGML_PATH		The sgmls parser path for dtd and entity files.
#     SGMLDECL		The filename for an sgml dcl file.
#     SCRIPT_OPTS	Command line arguments for the translate script/program.
#

#
# USE THESE PROGRAMS FOR TRANSLATION
#
SGMLS=sgmls
SGMLSASP=sgmlsasp
AWK=gawk

# Put your primary output filename extension here
EXT=info

# set DASHI to appropriate setting for SGMLS
DASHI=-ifmtinfo

#
# local variables : 
# --
	TEMPFILE1=/tmp/sgml2html$$tmp1
	TEMPFILE2=/tmp/sgml2html$$tmp2
	TEMPFILE3=/tmp/sgml2html$$tmp3
	
	# expand replaces tabs with 8 spaces
	TABS="-8"
	
# --

usage () {
	echo "Usage: $PROGNAME [...] $FORMAT <file> [ARGS]";
	echo "ARGS in: [-t <n>]";
	echo "  -t <n>     tabstops each <n>th col (default 8)";
	echo "  anything else is ignored";
	echo 
	exit 1 
}

trap 'cleanup; exit 1' 1 2 3 9
trap 'cleanup' 0 15

cleanup () {
    if [ $VVERBOSE = "yes" ]; then
        announce "rm -f $TEMPFILE1 $TEMPFILE2 $TEMPFILE3"
	fi
	rm -f $TEMPFILE1 $TEMPFILE2 $TEMPFILE3
}

announce () {   
	if [ $VERBOSE = "yes" ]
	then
		echo  $1 >&2
	fi
}

# do they need help?
case "$1" in
	"-h" | "--help" | "-help") usage
	exit 1
esac

# do they need help?
for i in $*; do
	case $i in 
		"-h" | "--help" | "-help") usage
		exit 1
	esac
done

#
# getopt - Parse Command Line
#
for i in $*
do
	case $i in
		-t)    TABS="-"$2; shift; shift;;
		--)    shift; break;;
	esac
done

if [ $VVERBOSE = "yes" ]; then
    announce TABS=$TABS
    announce DASHI=$DASHI
fi

#
# call sgmls or nsgmls
# reads from the standard input and writes to the standard output
#
announce "sed 's/\@/\@\@/g' $SGMLDECL $SGMLFILE | \\ "
announce "    $SGMLS $DASHI \\ "
announce "    > $TEMPFILE1 "
	
sed 's/\@/\@\@/g' $SGMLDECL $SGMLFILE | \
    $SGMLS $DASHI \
    > $TEMPFILE1 

# test for errors
if [ $? = 1 ]; then 
    echo "SGML parsing error, no formatting done..."
    exit 1
fi

#
announce "$SGMLSASP $STYLE $MAP < $TEMPFILE1 | \\ " 
announce "    expand $TABS |€\\ " 
announce "    $SCRIPTDIR/makeglossary.perl $FILE \\ " 
announce "    > $TEMPFILE2 " 
#
$SGMLSASP $STYLE $MAP < $TEMPFILE1 | \
    expand $TABS | \
    $SCRIPTDIR/makeglossary.perl $FILE \
    > $TEMPFILE2

INFOFILE=`basename $SGMLFILE .sgml`.info

# Process AWK and makeinfo at a time.
$AWK -v INFO=$INFOFILE -- '

function cut(s) {
   while ((substr(s,1,1)==" ")||(substr(s,1,1)=="\t")) 
      s=substr(s,2,length(s)-1);
   while ((substr(s,length(s),1)==" ")||(substr(s,length(s),1)=="\t")) 
      s=substr(s,1,length(s)-1);
   return s;	
}

function rest(n)
{
   save = $0;
   $0 = cut($0);
   for (i=0; i<n-1; i++)
     $0 = cut(substr($0,length($1)+1,length($0)));
   val = $0;
   $0 = save;
   return val;
}

function fill(s,l)
{
   while ( length(s) < l ) 
      s = s " ";
   return s;
}

function conv(entrytext)
{
   gsub( "@[A-Za-z][A-Za-z0-9]*", "", entrytext );
   gsub( "\{", "", entrytext );
   gsub( "\}", "", entrytext );
   gsub( ",", "", entrytext );
   gsub( /\./, "-", entrytext );
   gsub( ";", "", entrytext );
   gsub( "  ", " ", entrytext );
   return entrytext;
}

BEGIN {
   curmenu=0;
   curlevel=0;
   menustack[curlevel]=0;
   count[menustack[curlevel]]=0;
}

NR == 2 {
   print "@c %** START OF HEADER";
   print "@setfilename " INFO;
   print "@c %** END OF HEADER";
}

{
   if ( $1=="@SUB" ) {
      entrytext = conv(rest(2));
      if ( cut(entrytext)=="" ) {
         getline;
         if ( $1=="@LABEL" ) {
            tmp = $2;
            getline;
            entrytext = $0;
            labels[tmp] = entrytext;
         } else {
            entrytext = $0;
         }
      }

      entry = fill("* " entrytext "::",24);
      
      if ( firstnode=="" ) firstnode=entrytext;
      menuentry[menustack[curlevel] count[menustack[curlevel]]] = entry;
      count[menustack[curlevel]]++;

      curlevel++;
      curmenu++;
      menustack[curlevel] = curmenu;
      count[menustack[curlevel]]=0;
   }
   else if ( $1=="@ENDSUB" ) {
      curlevel--;
   }
   else if ( $1=="@LABEL" ) {
      labels[$2] = entrytext;
   }
   else if ( $1=="@title" ) {
      title = rest(2);
   }
   else if ( $1=="@subtitle" ) {
      subtitle = rest(2);
   }
   else if ( $1=="@author" ) {
      author = rest(2);
   }
}

END {
   close(FILENAME);

   curmenu=0;
   curlevel=0;
   firstsec=1;

   while ( getline < FILENAME )
   {
      if ( $1=="@TOP" ) {
	 print "@node top";
	 print "@top " title;
	 print "@example";
	 print author;
	 print subtitle;
	 print "@end example";
      }
      else if ( ( $1=="@title" ) || ( $1=="@subtitle" ) || ( $1=="@author" ) ||
	       ( $1=="@LABEL" ) ) 
      {
      }
      else if ( $1=="@REF" ) {
	 print "@ref{" labels[$2] "}";
      }
      else if ( $1=="@SUB" ) {
         if ( firstsec==1 ) {
	    if ( count[menustack[curlevel]] ) {
	       print "@menu";
	       for (i=0; i<count[menustack[curlevel]]; i++) 
	          print menuentry[menustack[curlevel] i];
   	       print "@end menu";
	    }
	 }

	 s = conv(rest(2));
         if ( s=="" ) {
            getline < FILENAME;
            if ( $1=="@LABEL" ) {
               getline < FILENAME;
               s = $0;
            } else {
               s = $0;
            }
         }

	 print "@node " s;
	 
	 if ( curlevel==0 ) print "@chapter " s;
	 else if ( curlevel==1 ) print "@section " s;
	 else if ( curlevel==2 ) print "@subsection " s;
	 else print "@subsubsection " s;

	 curlevel++;
	 curmenu++;
	 menustack[curlevel] = curmenu;
         firstsec=1;
      }
      else if ( $1=="@ENDSUB" ) {
	 curlevel--;
         firstsec=0;
      }
      else print;
   }
}
' $TEMPFILE2 > $TEMPFILE3

makeinfo $TEMPFILE3 -o $INFOFILE

exit 0
